"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
jQuery(function ($) {
  $(document).ready(function () {
    $('.js-page-nav li a').click(function (e) {
      e.preventDefault();
      var index = $(this).attr('data-page-nav-index');

      // Check if the preference to not show popup is set in localStorage
      if (localStorage.getItem('noShowPopup') === 'true') {
        return; // Exit the function if the preference is set
      }

      // Remove --active class from all popups
      $('.js-page-nav-inner').removeClass('--active');

      // Now add --active class only to the clicked popup
      $('.js-page-nav-popup').addClass('--active');
      $('.js-page-nav-popup .js-page-nav-inner[data-page-nav-index="' + index + '"]').addClass('--active');
    });

    // Handler for closing the popup normally
    $('.js-page-nav-popup .js-close').click(function () {
      $('.js-page-nav-popup, .js-page-nav-inner').removeClass('--active');
    });

    // Handler for the hard close button
    $('.js-page-nav-popup .js-close-hard').click(function () {
      $('.js-page-nav-popup, .js-page-nav-inner').removeClass('--active');
      localStorage.setItem('noShowPopup', 'true'); // Save preference in localStorage
    });

    $('.js-page-nav li a').click(function (e) {
      e.preventDefault();
      var index = $(this).attr('data-page-nav-index');
      if (!localStorage.getItem('noShowPopup')) {
        $('.js-page-nav-inner').removeClass('--active');
        $('.js-page-nav-popup').addClass('--active');
        $('.js-page-nav-popup .js-page-nav-inner[data-page-nav-index="' + index + '"]').addClass('--active');
      } else {
        window.location = this.href;
      }
    });
    $('.js-page-nav-popup .js-close').click(function () {
      $('.js-page-nav-popup, .js-page-nav-inner').removeClass('--active');
    });
    $('.js-nav-open').click(function () {
      $(this).toggleClass('active');
      $('.js-header-nav').toggleClass('active');
    });
    $('.js-principles-popup-opener').click(function () {
      var index = $(this).attr('data-index');
      $('.js-principles-popup').addClass('--active');
      $('.js-principles-popup-nav button, .js-principles-popup-container').removeClass('--active');
      $('.js-principles-popup-nav button[data-index="' + index + '"]').addClass('--active');
      $('.js-principles-popup-container[data-index="' + index + '"]').addClass('--active');
    });
    $('.js-principles-popup-nav button').click(function () {
      var index = $(this).attr('data-index');
      $('.js-principles-popup-nav button, .js-principles-popup-container').removeClass('--active');
      $('.js-principles-popup-nav button[data-index="' + index + '"]').addClass('--active');
      $('.js-principles-popup-container[data-index="' + index + '"]').addClass('--active');
    });
    $('.js-principles-popup-close').click(function () {
      $('.js-principles-popup').removeClass('--active');
    });
  });
});
var sliderImages = new Swiper('.slider__images .swiper-container', {
  // ищем слайдер превью по селектору
  // задаем параметры
  direction: 'vertical',
  // вертикальная прокрутка
  slidesPerView: 1,
  // показывать по 1 изображению
  spaceBetween: 0,
  // расстояние между слайдами
  grabCursor: true,
  // менять иконку курсора
  breakpoints: {
    // условия для разных размеров окна браузера
    0: {
      // при 0px и выше
      direction: 'horizontal' // горизонтальная прокрутка
    },

    768: {
      // при 768px и выше
      direction: 'vertical' // вертикальная прокрутка
    }
  },

  mousewheel: {
    releaseOnEdges: true // change this to 'true' to enable default scrolling when edge is reached
  },

  on: {
    reachEnd: function reachEnd() {
      document.body.style.overflowY = 'auto';
      document.body.style.overflowX = 'hidden';
    },
    reachBeginning: function reachBeginning() {
      document.body.style.overflowY = 'auto';
      document.body.style.overflowX = 'hidden';
    }
  }
});

// Function to handle mouse wheel event
function handleMouseWheel(e) {
  var swiper = sliderImages;

  // Determine the direction of the scroll
  var isScrollingUp = e.originalEvent.deltaY < 0;
  console.log(isScrollingUp);
  // Prevent window scroll if Swiper can still scroll
  if (isScrollingUp && !swiper.isBeginning || !isScrollingUp && !swiper.isEnd) {
    e.preventDefault();
  }
}

// Attach the mouse wheel event listener to the Swiper container
$(document).on('wheel', '.slider__images .swiper-container', handleMouseWheel);
var subtitlesElement = document.getElementById("subtitles");
var playButton = $('.academy-audio__player-button');
var subtitles = [{
  text: "Рождаясь, каждый из нас обладает уникальным потенциалом и мощнейшим запасом здоровья.",
  time: 6
}, {
  text: "В твоём распоряжении совершенный биологический механизм, который выковывался миллионами лет эволюции.",
  time: 6
}, {
  text: "\u0415\u0433\u043E \u0441\u0435\u0440\u0434\u0446\u0435 \u0431\u044C\u0451\u0442\u0441\u044F \u0441 \u043F\u0435\u0440\u0432\u043E\u0439 \u0441\u0435\u043A\u0443\u043D\u0434\u044B,\n        \u041B\u0451\u0433\u043A\u0438\u0435 \u0440\u0430\u0441\u043A\u0430\u0447\u0438\u0432\u0430\u044E\u0442 \u0432\u043E\u0437\u0434\u0443\u0445, \u0441\u043B\u043E\u0432\u043D\u043E \u043A\u0443\u0437\u043D\u0435\u0447\u043D\u044B\u0435 \u043C\u0435\u0445\u0430, ",
  time: 7
}, {
  text: "\u041C\u043E\u0437\u0433 \u0435\u0436\u0435\u0441\u0435\u043A\u0443\u043D\u0434\u043D\u043E \u0433\u0435\u043D\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u044D\u043B\u0435\u043A\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u0438\u0439 \u0437\u0430\u0440\u044F\u0434,\n        \u0410 \u043C\u044B\u0448\u0446\u044B \u0441\u043E\u043A\u0440\u0430\u0449\u0430\u044E\u0442\u0441\u044F \u0432\u043E\u043B\u0435\u0439 \u0440\u0430\u0437\u0443\u043C\u0430.",
  time: 6
}, {
  text: "Все твоё тело — это единая, цельная живая материя.",
  time: 6
}, {
  text: "\u0418\u0437\u0443\u0447\u0438 \u0435\u0433\u043E \u0437\u0430\u043A\u043E\u043D\u044B, \u043E\u0431\u0435\u0440\u0435\u0433\u0430\u0439 \u0435\u0433\u043E, \u0443\u043F\u0440\u0430\u0432\u043B\u044F\u0439 \u0438\u043C \u2014\n        \u0418 \u0442\u044B \u043F\u043E\u043B\u0443\u0447\u0438\u0448\u044C \u0438\u043D\u0441\u0442\u0440\u0443\u043C\u0435\u043D\u0442, \u043A\u043E\u0442\u043E\u0440\u043E\u043C\u0443 \u043D\u0435\u0442 \u0440\u0430\u0432\u043D\u044B\u0445.",
  time: 6
}
// добавьте другие реплики и их тайминги здесь
];

var currentReplicaIndex = 0;
var currentWordIndex = 0;
var isPaused = true;
function subtitlesBegin() {
  return _subtitlesBegin.apply(this, arguments);
}
function _subtitlesBegin() {
  _subtitlesBegin = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var _subtitles$currentRep, text, time, html, wordElements, i, delayBetweenWords;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          if (!(currentReplicaIndex < subtitles.length && !isPaused)) {
            _context.next = 17;
            break;
          }
          _subtitles$currentRep = subtitles[currentReplicaIndex], text = _subtitles$currentRep.text, time = _subtitles$currentRep.time;
          html = text.split(" ").map(function (word) {
            return "<span class=\"subtitle-word\">".concat(word, "</span>");
          }).join(" ");
          subtitlesElement.innerHTML = html;
          wordElements = document.querySelectorAll(".subtitle-word");
          for (i = 0; i < currentWordIndex; i++) {
            wordElements[i].classList.add("active");
          }
          delayBetweenWords = time / wordElements.length;
        case 7:
          if (!(currentWordIndex < wordElements.length && !isPaused)) {
            _context.next = 14;
            break;
          }
          wordElements[currentWordIndex].classList.add("active");
          _context.next = 11;
          return sleep(delayBetweenWords * 1000);
        case 11:
          currentWordIndex++;
          _context.next = 7;
          break;
        case 14:
          if (!isPaused) {
            currentReplicaIndex++;
            currentWordIndex = 0;
          }
          _context.next = 0;
          break;
        case 17:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _subtitlesBegin.apply(this, arguments);
}
function sleep(_x) {
  return _sleep.apply(this, arguments);
}
function _sleep() {
  _sleep = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(timeout) {
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          return _context2.abrupt("return", new Promise(function (resolve) {
            setTimeout(function () {
              resolve();
            }, timeout);
          }));
        case 1:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return _sleep.apply(this, arguments);
}
subtitlesElement.innerHTML = subtitles[0].text.split(" ").map(function (word) {
  return "<span class=\"subtitle-word\">".concat(word, "</span>");
}).join(" ");
var audioContainer = document.getElementById("myAudio");
playButton.on("click", function () {
  isPaused = !isPaused;
  console.log('clock', isPaused);
  if (!isPaused) {
    playButton.addClass('playing');
    audioContainer.play();
    setTimeout(function () {
      subtitlesBegin();
    }, 3000);
  } else {
    playButton.removeClass('playing');
    audioContainer.pause();
  }
  console.log(isPaused ? "UNPAUSED" : "PAUSED");
});
$(document).ready(function () {
  $('#toggle-principles').click(function () {
    $('.academy-principles__row:nth-child(2)').toggle();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,